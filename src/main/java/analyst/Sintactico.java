
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyst;

import controladores.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import controladores.Simbolo.Tipo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\011\000\002\004\015\000\002" +
    "\004\012\000\002\004\016\000\002\004\013\000\002\004" +
    "\007\000\002\004\005\000\002\004\005\000\002\004\011" +
    "\000\002\004\011\000\002\004\012\000\002\004\012\000" +
    "\002\004\012\000\002\004\012\000\002\004\013\000\002" +
    "\004\013\000\002\004\013\000\002\004\006\000\002\004" +
    "\007\000\002\004\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\006\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\006\013\000\002\006\012\000\002\012\003\000\002\012" +
    "\004\000\002\011\007\000\002\011\005\000\002\005\004" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\030\003\012\027\016\032\005\034\017\035" +
    "\004\036\015\037\014\041\011\046\013\051\007\055\020" +
    "\001\002\000\004\006\273\001\002\000\014\027\201\033" +
    "\200\036\175\041\176\055\177\001\002\000\032\002\000" +
    "\003\012\027\016\032\005\034\017\035\004\036\015\037" +
    "\014\041\011\046\013\051\007\055\020\001\002\000\016" +
    "\006\043\011\044\024\047\025\046\026\045\055\042\001" +
    "\002\000\050\002\ufffe\003\ufffe\006\ufffe\023\ufffe\027\ufffe" +
    "\032\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\041\ufffe\043" +
    "\ufffe\044\ufffe\046\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\055\ufffe\001\002\000\004\055\155\001\002\000\050\002" +
    "\uffe4\003\uffe4\006\uffe4\023\uffe4\027\uffe4\032\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\041\uffe4\043\uffe4\044\uffe4\046" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\055\uffe4\001\002" +
    "\000\016\006\043\011\044\024\047\025\046\026\045\055" +
    "\042\001\002\000\004\006\102\001\002\000\004\055\100" +
    "\001\002\000\004\055\076\001\002\000\004\006\066\001" +
    "\002\000\012\006\025\016\026\017\023\054\024\001\002" +
    "\000\004\002\022\001\002\000\004\002\001\001\002\000" +
    "\004\004\065\001\002\000\016\006\043\011\044\024\047" +
    "\025\046\026\045\055\042\001\002\000\012\007\030\024" +
    "\033\025\032\030\034\001\002\000\004\004\027\001\002" +
    "\000\050\002\ufff1\003\ufff1\006\ufff1\023\ufff1\027\ufff1\032" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\041\ufff1\043\ufff1" +
    "\044\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\055" +
    "\ufff1\001\002\000\004\004\041\001\002\000\006\007\036" +
    "\015\035\001\002\000\006\007\uffdd\015\uffdd\001\002\000" +
    "\006\007\uffdf\015\uffdf\001\002\000\006\007\uffde\015\uffde" +
    "\001\002\000\004\024\040\001\002\000\004\004\037\001" +
    "\002\000\050\002\uffe5\003\uffe5\006\uffe5\023\uffe5\027\uffe5" +
    "\032\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\043" +
    "\uffe5\044\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\055\uffe5\001\002\000\006\007\uffdc\015\uffdc\001\002\000" +
    "\050\002\uffe6\003\uffe6\006\uffe6\023\uffe6\027\uffe6\032\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\041\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\055\uffe6" +
    "\001\002\000\032\004\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\020\uffcc\021\uffcc\042\uffcc\045\uffcc" +
    "\047\uffcc\001\002\000\016\006\043\011\044\024\047\025" +
    "\046\026\045\055\042\001\002\000\016\006\043\011\044" +
    "\024\047\025\046\026\045\055\042\001\002\000\032\004" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\020\uffcd\021\uffcd\042\uffcd\045\uffcd\047\uffcd\001\002\000" +
    "\032\004\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\020\uffce\021\uffce\042\uffce\045\uffce\047\uffce\001" +
    "\002\000\032\004\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\020\uffcf\021\uffcf\042\uffcf\045\uffcf\047" +
    "\uffcf\001\002\000\014\004\055\010\051\011\052\012\054" +
    "\013\053\001\002\000\016\006\043\011\044\024\047\025" +
    "\046\026\045\055\042\001\002\000\016\006\043\011\044" +
    "\024\047\025\046\026\045\055\042\001\002\000\016\006" +
    "\043\011\044\024\047\025\046\026\045\055\042\001\002" +
    "\000\016\006\043\011\044\024\047\025\046\026\045\055" +
    "\042\001\002\000\050\002\ufff8\003\ufff8\006\ufff8\023\ufff8" +
    "\027\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\041" +
    "\ufff8\043\ufff8\044\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\055\ufff8\001\002\000\032\004\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\020\uffd2\021\uffd2" +
    "\042\uffd2\045\uffd2\047\uffd2\001\002\000\032\004\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\020\uffd1" +
    "\021\uffd1\042\uffd1\045\uffd1\047\uffd1\001\002\000\032\004" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\054\013\053\014\uffd3" +
    "\020\uffd3\021\uffd3\042\uffd3\045\uffd3\047\uffd3\001\002\000" +
    "\032\004\uffd4\007\uffd4\010\uffd4\011\uffd4\012\054\013\053" +
    "\014\uffd4\020\uffd4\021\uffd4\042\uffd4\045\uffd4\047\uffd4\001" +
    "\002\000\032\004\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\020\uffd5\021\uffd5\042\uffd5\045\uffd5\047" +
    "\uffd5\001\002\000\014\007\064\010\051\011\052\012\054" +
    "\013\053\001\002\000\032\004\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\020\uffd0\021\uffd0\042\uffd0" +
    "\045\uffd0\047\uffd0\001\002\000\050\002\ufff0\003\ufff0\006" +
    "\ufff0\023\ufff0\027\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\041\ufff0\043\ufff0\044\ufff0\046\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\055\ufff0\001\002\000\020\006\043" +
    "\011\044\024\047\025\046\026\045\030\067\055\042\001" +
    "\002\000\006\007\uffca\014\uffca\001\002\000\006\007\072" +
    "\014\073\001\002\000\016\007\uffc9\010\051\011\052\012" +
    "\054\013\053\014\uffc9\001\002\000\004\004\075\001\002" +
    "\000\020\006\043\011\044\024\047\025\046\026\045\030" +
    "\067\055\042\001\002\000\006\007\uffcb\014\uffcb\001\002" +
    "\000\050\002\ufffd\003\ufffd\006\ufffd\023\ufffd\027\ufffd\032" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\041\ufffd\043\ufffd" +
    "\044\ufffd\046\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\055" +
    "\ufffd\001\002\000\004\004\077\001\002\000\050\002\ufff9" +
    "\003\ufff9\006\ufff9\023\ufff9\027\ufff9\032\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\041\ufff9\043\ufff9\044\ufff9\046\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\055\ufff9\001\002\000" +
    "\004\004\101\001\002\000\050\002\ufffb\003\ufffb\006\ufffb" +
    "\023\ufffb\027\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\041\ufffb\043\ufffb\044\ufffb\046\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\055\ufffb\001\002\000\016\006\043\011" +
    "\044\024\047\025\046\026\045\055\042\001\002\000\004" +
    "\007\111\001\002\000\016\010\051\011\052\012\054\013" +
    "\053\020\105\021\106\001\002\000\016\006\043\011\044" +
    "\024\047\025\046\026\045\055\042\001\002\000\016\006" +
    "\043\011\044\024\047\025\046\026\045\055\042\001\002" +
    "\000\014\007\uffc8\010\051\011\052\012\054\013\053\001" +
    "\002\000\014\007\uffc7\010\051\011\052\012\054\013\053" +
    "\001\002\000\004\042\112\001\002\000\030\003\012\027" +
    "\016\032\005\034\017\035\004\036\015\037\014\041\011" +
    "\046\013\051\007\055\020\001\002\000\032\003\012\027" +
    "\016\032\005\034\017\035\004\036\015\037\014\041\011" +
    "\043\115\046\013\051\007\055\020\001\002\000\050\002" +
    "\uffff\003\uffff\006\uffff\023\uffff\027\uffff\032\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\041\uffff\043\uffff\044\uffff\046" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\055\uffff\001\002" +
    "\000\052\002\ufff7\003\ufff7\006\ufff7\023\ufff7\027\ufff7\032" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\117\041\ufff7" +
    "\043\ufff7\044\ufff7\046\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\055\ufff7\001\002\000\052\002\ufff5\003\ufff5\006\ufff5" +
    "\023\ufff5\027\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\132\041\ufff5\043\ufff5\044\ufff5\046\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\055\ufff5\001\002\000\006\037" +
    "\120\042\121\001\002\000\004\006\124\001\002\000\030" +
    "\003\012\027\016\032\005\034\017\035\004\036\015\037" +
    "\014\041\011\046\013\051\007\055\020\001\002\000\032" +
    "\003\012\027\016\032\005\034\017\035\004\036\015\037" +
    "\014\041\011\043\123\046\013\051\007\055\020\001\002" +
    "\000\050\002\ufff6\003\ufff6\006\ufff6\023\ufff6\027\ufff6\032" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\041\ufff6\043\ufff6" +
    "\044\ufff6\046\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\055" +
    "\ufff6\001\002\000\016\006\043\011\044\024\047\025\046" +
    "\026\045\055\042\001\002\000\004\007\126\001\002\000" +
    "\004\042\127\001\002\000\030\003\012\027\016\032\005" +
    "\034\017\035\004\036\015\037\014\041\011\046\013\051" +
    "\007\055\020\001\002\000\032\003\012\027\016\032\005" +
    "\034\017\035\004\036\015\037\014\041\011\043\131\046" +
    "\013\051\007\055\020\001\002\000\052\002\uffda\003\uffda" +
    "\006\uffda\023\uffda\027\uffda\032\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\046\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\055\uffda\001\002\000" +
    "\006\037\133\042\134\001\002\000\004\006\137\001\002" +
    "\000\030\003\012\027\016\032\005\034\017\035\004\036" +
    "\015\037\014\041\011\046\013\051\007\055\020\001\002" +
    "\000\032\003\012\027\016\032\005\034\017\035\004\036" +
    "\015\037\014\041\011\043\136\046\013\051\007\055\020" +
    "\001\002\000\050\002\ufff4\003\ufff4\006\ufff4\023\ufff4\027" +
    "\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4" +
    "\043\ufff4\044\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\055\ufff4\001\002\000\016\006\043\011\044\024\047" +
    "\025\046\026\045\055\042\001\002\000\004\007\141\001" +
    "\002\000\004\042\142\001\002\000\030\003\012\027\016" +
    "\032\005\034\017\035\004\036\015\037\014\041\011\046" +
    "\013\051\007\055\020\001\002\000\032\003\012\027\016" +
    "\032\005\034\017\035\004\036\015\037\014\041\011\043" +
    "\144\046\013\051\007\055\020\001\002\000\052\002\uffdb" +
    "\003\uffdb\006\uffdb\023\uffdb\027\uffdb\032\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb" +
    "\046\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\055\uffdb\001" +
    "\002\000\014\010\051\011\052\012\054\013\053\045\146" +
    "\001\002\000\016\006\043\011\044\024\047\025\046\026" +
    "\045\055\042\001\002\000\014\010\051\011\052\012\054" +
    "\013\053\047\150\001\002\000\016\006\043\011\044\024" +
    "\047\025\046\026\045\055\042\001\002\000\014\010\051" +
    "\011\052\012\054\013\053\042\152\001\002\000\030\003" +
    "\012\027\016\032\005\034\017\035\004\036\015\037\014" +
    "\041\011\046\013\051\007\055\020\001\002\000\032\003" +
    "\012\027\016\032\005\034\017\035\004\036\015\037\014" +
    "\041\011\046\013\050\154\051\007\055\020\001\002\000" +
    "\050\002\ufff3\003\ufff3\006\ufff3\023\ufff3\027\ufff3\032\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\041\ufff3\043\ufff3\044" +
    "\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\055\ufff3" +
    "\001\002\000\004\004\156\001\002\000\050\002\ufffa\003" +
    "\ufffa\006\ufffa\023\ufffa\027\ufffa\032\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\041\ufffa\043\ufffa\044\ufffa\046\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\055\ufffa\001\002\000\014" +
    "\010\051\011\052\012\054\013\053\042\160\001\002\000" +
    "\006\006\161\053\164\001\002\000\016\006\043\011\044" +
    "\024\047\025\046\026\045\055\042\001\002\000\010\006" +
    "\uffd9\052\uffd9\053\uffd9\001\002\000\010\006\161\052\167" +
    "\053\164\001\002\000\004\005\165\001\002\000\030\003" +
    "\012\027\016\032\005\034\017\035\004\036\015\037\014" +
    "\041\011\046\013\051\007\055\020\001\002\000\036\003" +
    "\012\006\uffd6\027\016\032\005\034\017\035\004\036\015" +
    "\037\014\041\011\046\013\051\007\052\uffd6\053\uffd6\055" +
    "\020\001\002\000\050\002\ufff2\003\ufff2\006\ufff2\023\ufff2" +
    "\027\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041" +
    "\ufff2\043\ufff2\044\ufff2\046\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\055\ufff2\001\002\000\010\006\uffd8\052\uffd8\053" +
    "\uffd8\001\002\000\014\007\172\010\051\011\052\012\054" +
    "\013\053\001\002\000\004\005\173\001\002\000\030\003" +
    "\012\027\016\032\005\034\017\035\004\036\015\037\014" +
    "\041\011\046\013\051\007\055\020\001\002\000\036\003" +
    "\012\006\uffd7\027\016\032\005\034\017\035\004\036\015" +
    "\037\014\041\011\046\013\051\007\052\uffd7\053\uffd7\055" +
    "\020\001\002\000\004\055\260\001\002\000\004\055\245" +
    "\001\002\000\004\006\233\001\002\000\004\006\226\001" +
    "\002\000\004\055\202\001\002\000\004\006\203\001\002" +
    "\000\012\007\206\027\210\036\205\041\204\001\002\000" +
    "\004\055\225\001\002\000\004\055\224\001\002\000\004" +
    "\022\221\001\002\000\006\007\213\015\212\001\002\000" +
    "\004\055\211\001\002\000\006\007\uffe1\015\uffe1\001\002" +
    "\000\004\036\217\001\002\000\004\022\214\001\002\000" +
    "\030\003\012\027\016\032\005\034\017\035\004\036\015" +
    "\037\014\041\011\046\013\051\007\055\020\001\002\000" +
    "\032\003\012\023\216\027\016\032\005\034\017\035\004" +
    "\036\015\037\014\041\011\046\013\051\007\055\020\001" +
    "\002\000\050\002\uffe7\003\uffe7\006\uffe7\023\uffe7\027\uffe7" +
    "\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7\043" +
    "\uffe7\044\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\055\uffe7\001\002\000\004\055\220\001\002\000\006\007" +
    "\uffe0\015\uffe0\001\002\000\030\003\012\027\016\032\005" +
    "\034\017\035\004\036\015\037\014\041\011\046\013\051" +
    "\007\055\020\001\002\000\032\003\012\023\223\027\016" +
    "\032\005\034\017\035\004\036\015\037\014\041\011\046" +
    "\013\051\007\055\020\001\002\000\050\002\uffeb\003\uffeb" +
    "\006\uffeb\023\uffeb\027\uffeb\032\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\041\uffeb\043\uffeb\044\uffeb\046\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\055\uffeb\001\002\000\006\007" +
    "\uffe3\015\uffe3\001\002\000\006\007\uffe2\015\uffe2\001\002" +
    "\000\004\007\227\001\002\000\004\022\230\001\002\000" +
    "\030\003\012\027\016\032\005\034\017\035\004\036\015" +
    "\037\014\041\011\046\013\051\007\055\020\001\002\000" +
    "\032\003\012\023\232\027\016\032\005\034\017\035\004" +
    "\036\015\037\014\041\011\046\013\051\007\055\020\001" +
    "\002\000\050\002\uffef\003\uffef\006\uffef\023\uffef\027\uffef" +
    "\032\uffef\034\uffef\035\uffef\036\uffef\037\uffef\041\uffef\043" +
    "\uffef\044\uffef\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\055\uffef\001\002\000\012\007\234\027\210\036\205\041" +
    "\204\001\002\000\004\022\242\001\002\000\006\007\236" +
    "\015\212\001\002\000\004\022\237\001\002\000\030\003" +
    "\012\027\016\032\005\034\017\035\004\036\015\037\014" +
    "\041\011\046\013\051\007\055\020\001\002\000\032\003" +
    "\012\023\241\027\016\032\005\034\017\035\004\036\015" +
    "\037\014\041\011\046\013\051\007\055\020\001\002\000" +
    "\050\002\uffea\003\uffea\006\uffea\023\uffea\027\uffea\032\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\041\uffea\043\uffea\044" +
    "\uffea\046\uffea\050\uffea\051\uffea\052\uffea\053\uffea\055\uffea" +
    "\001\002\000\030\003\012\027\016\032\005\034\017\035" +
    "\004\036\015\037\014\041\011\046\013\051\007\055\020" +
    "\001\002\000\032\003\012\023\244\027\016\032\005\034" +
    "\017\035\004\036\015\037\014\041\011\046\013\051\007" +
    "\055\020\001\002\000\050\002\uffee\003\uffee\006\uffee\023" +
    "\uffee\027\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\041\uffee\043\uffee\044\uffee\046\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\055\uffee\001\002\000\004\006\246\001\002" +
    "\000\012\007\247\027\210\036\205\041\204\001\002\000" +
    "\004\022\255\001\002\000\006\007\251\015\212\001\002" +
    "\000\004\022\252\001\002\000\030\003\012\027\016\032" +
    "\005\034\017\035\004\036\015\037\014\041\011\046\013" +
    "\051\007\055\020\001\002\000\032\003\012\023\254\027" +
    "\016\032\005\034\017\035\004\036\015\037\014\041\011" +
    "\046\013\051\007\055\020\001\002\000\050\002\uffe8\003" +
    "\uffe8\006\uffe8\023\uffe8\027\uffe8\032\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\041\uffe8\043\uffe8\044\uffe8\046\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\055\uffe8\001\002\000\030" +
    "\003\012\027\016\032\005\034\017\035\004\036\015\037" +
    "\014\041\011\046\013\051\007\055\020\001\002\000\032" +
    "\003\012\023\257\027\016\032\005\034\017\035\004\036" +
    "\015\037\014\041\011\046\013\051\007\055\020\001\002" +
    "\000\050\002\uffec\003\uffec\006\uffec\023\uffec\027\uffec\032" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\041\uffec\043\uffec" +
    "\044\uffec\046\uffec\050\uffec\051\uffec\052\uffec\053\uffec\055" +
    "\uffec\001\002\000\004\006\261\001\002\000\012\007\263" +
    "\027\210\036\205\041\204\001\002\000\006\007\267\015" +
    "\212\001\002\000\004\022\264\001\002\000\030\003\012" +
    "\027\016\032\005\034\017\035\004\036\015\037\014\041" +
    "\011\046\013\051\007\055\020\001\002\000\032\003\012" +
    "\023\266\027\016\032\005\034\017\035\004\036\015\037" +
    "\014\041\011\046\013\051\007\055\020\001\002\000\050" +
    "\002\uffed\003\uffed\006\uffed\023\uffed\027\uffed\032\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\041\uffed\043\uffed\044\uffed" +
    "\046\uffed\050\uffed\051\uffed\052\uffed\053\uffed\055\uffed\001" +
    "\002\000\004\022\270\001\002\000\030\003\012\027\016" +
    "\032\005\034\017\035\004\036\015\037\014\041\011\046" +
    "\013\051\007\055\020\001\002\000\032\003\012\023\272" +
    "\027\016\032\005\034\017\035\004\036\015\037\014\041" +
    "\011\046\013\051\007\055\020\001\002\000\050\002\uffe9" +
    "\003\uffe9\006\uffe9\023\uffe9\027\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\041\uffe9\043\uffe9\044\uffe9\046\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\055\uffe9\001\002\000" +
    "\016\006\043\011\044\024\047\025\046\026\045\055\042" +
    "\001\002\000\004\007\275\001\002\000\004\042\276\001" +
    "\002\000\030\003\012\027\016\032\005\034\017\035\004" +
    "\036\015\037\014\041\011\046\013\051\007\055\020\001" +
    "\002\000\032\003\012\027\016\032\005\034\017\035\004" +
    "\036\015\037\014\041\011\044\300\046\013\051\007\055" +
    "\020\001\002\000\050\002\ufffc\003\ufffc\006\ufffc\023\ufffc" +
    "\027\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\041" +
    "\ufffc\043\ufffc\044\ufffc\046\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\055\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\010\002\020\003\005\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\113\001\001" +
    "\000\004\005\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\047\001\001\000\004\014" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\062\001\001\000\004\005\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\060\001\001\000\004" +
    "\005\057\001\001\000\004\005\056\001\001\000\004\005" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\070\007\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\070\007\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\103\010\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\107\001\001" +
    "\000\004\005\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\112\004\007\001\001" +
    "\000\004\004\113\001\001\000\002\001\001\000\004\006" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\121\004\007\001\001\000\004\004" +
    "\113\001\001\000\002\001\001\000\006\005\103\010\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\127\004\007\001\001\000\004\004\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\134\004\007\001\001\000\004\004\113\001\001\000\002" +
    "\001\001\000\006\005\103\010\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\142\004\007\001\001" +
    "\000\004\004\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\146\001\001\000\002\001\001\000\004" +
    "\005\150\001\001\000\002\001\001\000\006\003\152\004" +
    "\007\001\001\000\004\004\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\161\012\162\001\001\000\004\005\170\001\001" +
    "\000\002\001\001\000\004\011\167\001\001\000\002\001" +
    "\001\000\006\003\165\004\007\001\001\000\004\004\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\173\004\007\001\001" +
    "\000\004\004\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\214\004\007\001\001\000\004" +
    "\004\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\221\004\007\001\001\000\004" +
    "\004\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\230\004\007\001\001\000\004\004\113\001\001\000" +
    "\002\001\001\000\004\013\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\237\004" +
    "\007\001\001\000\004\004\113\001\001\000\002\001\001" +
    "\000\006\003\242\004\007\001\001\000\004\004\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\252\004\007\001\001\000\004\004\113" +
    "\001\001\000\002\001\001\000\006\003\255\004\007\001" +
    "\001\000\004\004\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\264\004\007\001\001\000\004" +
    "\004\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\270\004\007\001\001\000\004\004\113\001\001" +
    "\000\002\001\001\000\006\005\103\010\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\276\004\007" +
    "\001\001\000\004\004\113\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public static LinkedList<String> lista = new LinkedList<String>();
    public static LinkedList<Object> valores = new LinkedList<Object>();

    public void syntax_error(Symbol s){
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }

    public void agregar(String s){
        lista.add(s);
    }
    public void ver(){
        for (String s : lista) {
            System.out.println(s);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    parser.AST=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= RESCRIBIR PARENTA expresion_cadena PARENTC PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Escribir(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= RMIENTRAS PARENTA expresion_logica PARENTC RHACER instrucciones RFINMIENTRAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Mientras(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= RENTERO IDENTIFICADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(a,Tipo.NUMERO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= RCADENA IDENTIFICADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(a,Tipo.CARACTER);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= RFLOTANTE IDENTIFICADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(a,Tipo.DECIMAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= IDENTIFICADOR IGUAL expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Asignacion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= RSI PARENTA expresion_logica PARENTC RHACER instrucciones RFINSI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Si(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RSI PARENTA expresion_logica PARENTC RHACER instrucciones RFINSI RSINO RHACER instrucciones RFINSI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Si(a,b,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= RSI PARENTA expresion_logica PARENTC RHACER instrucciones RFINSI else_ifs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Si(a,b,l,null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= RSI PARENTA expresion_logica PARENTC RHACER instrucciones RFINSI else_ifs RSINO RHACER instrucciones RFINSI 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Si(a,b,l,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RPARA expresion RHASTA expresion RCONPASO expresion RHACER instrucciones RFINPARA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Para(a,b,c,d);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= RSEGUN expresion RHACER cases RFINSEGUN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		//RESULT=new Segun(a,l);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= IDENTIFICADOR INCREMENTO PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Incremento(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= IDENTIFICADOR DECREMENTO PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Decremento(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= FUN MAIN PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= FUN IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= FUN RENTERO IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= FUN RCADENA IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= FUN RFLOTANTE IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= FUN IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= FUN RENTERO IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= FUN RCADENA IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= FUN RFLOTANTE IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= IDENTIFICADOR PARENTA PARENTC PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=new EjecutarFuncion(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= IDENTIFICADOR PARENTA llamada PARENTC PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT=new EjecutarFuncion(a,valores);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= RENTERO IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(a,Tipo.NUMERO); agregar(a.toString()); System.out.println("parametro entero "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= RCADENA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Declaracion(a,Tipo.CARACTER); agregar(a.toString()); System.out.println("parametro cadena");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametros ::= RFLOTANTE IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Declaracion(a,Tipo.DECIMAL); agregar(a.toString());  System.out.println("parametro decimal");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros ::= parametros COMA RENTERO IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		agregar(b.toString()); RESULT=new Declaracion(b,Tipo.NUMERO); System.out.println("parametro entero2");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // llamada ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add(new Double(a)); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // llamada ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // llamada ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // llamada ::= llamada COMA ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add(new Double(a)); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // else_ifs ::= else_ifs RSINO RSI PARENTA expresion_logica PARENTC RHACER instrucciones RFINSI 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= l; RESULT.add(new Si(a,b));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // else_ifs ::= RSINO RSI PARENTA expresion_logica PARENTC RHACER instrucciones RFINSI 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= new LinkedList<>(); RESULT.add(new Si(a,b));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cases ::= caso 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cases ::= cases caso 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // caso ::= PARENTA expresion PARENTC DOSPUNTOS instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caso",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // caso ::= RDEOTROMODO DOSPUNTOS instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caso",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= MENOS expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion MAS expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MENOS expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion POR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion DIV expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= PARENTA expresion PARENTC 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= ENTERO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= DECIMAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= CARACTER 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= IDENTIFICADOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_cadena ::= expresion_cadena CONCAT expresion_cadena 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.CONCATENACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_cadena",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_cadena ::= CADENA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_cadena",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_cadena ::= expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_cadena",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_logica ::= expresion MAYOR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_logica ::= expresion MENOR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MENOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
