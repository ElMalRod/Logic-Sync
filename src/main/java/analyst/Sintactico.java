
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyst;

import controladores.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import controladores.Simbolo.Tipo;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\006\000\002\004\011\000\002\004\015\000\002" +
    "\004\012\000\002\004\016\000\002\004\016\000\002\004" +
    "\005\000\002\004\005\000\002\004\011\000\002\004\011" +
    "\000\002\004\012\000\002\004\012\000\002\004\012\000" +
    "\002\004\012\000\002\004\013\000\002\004\013\000\002" +
    "\004\013\000\002\004\006\000\002\004\007\000\002\004" +
    "\011\000\002\004\005\000\002\004\003\000\002\014\003" +
    "\000\002\014\004\000\002\011\007\000\002\011\005\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\006\000\002\012\006\000\002\012\006\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\006\013\000" +
    "\002\006\012\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\010\005\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\032\003\013\027\017\032\005\034\007\035" +
    "\020\036\004\037\016\040\015\042\012\044\014\046\011" +
    "\053\021\001\002\000\004\006\311\001\002\000\014\027" +
    "\213\033\212\037\210\042\207\053\211\001\002\000\034" +
    "\002\000\003\013\027\017\032\005\034\007\035\020\036" +
    "\004\037\016\040\015\042\012\044\014\046\011\053\021" +
    "\001\002\000\004\053\205\001\002\000\044\002\ufffe\003" +
    "\ufffe\023\ufffe\027\ufffe\032\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\042\ufffe\044\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\053\ufffe\001\002\000\004\006\165\001\002" +
    "\000\004\053\163\001\002\000\044\002\uffe3\003\uffe3\023" +
    "\uffe3\027\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\042\uffe3\044\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\053\uffe3\001\002\000\004\037\150\001\002\000\004" +
    "\006\105\001\002\000\004\053\103\001\002\000\004\053" +
    "\101\001\002\000\004\006\071\001\002\000\012\006\026" +
    "\016\027\017\024\052\025\001\002\000\004\002\023\001" +
    "\002\000\004\002\001\001\002\000\004\004\070\001\002" +
    "\000\016\006\046\011\047\024\052\025\051\026\050\053" +
    "\045\001\002\000\012\007\031\024\035\025\033\030\034" +
    "\001\002\000\004\004\030\001\002\000\044\002\ufff2\003" +
    "\ufff2\023\ufff2\027\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\042\ufff2\044\ufff2\046\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\053\ufff2\001\002\000\004\004\044\001\002" +
    "\000\006\007\037\015\036\001\002\000\006\007\uffd6\015" +
    "\uffd6\001\002\000\006\007\uffd7\015\uffd7\001\002\000\006" +
    "\007\uffd8\015\uffd8\001\002\000\010\024\042\025\041\030" +
    "\043\001\002\000\004\004\040\001\002\000\044\002\uffe6" +
    "\003\uffe6\023\uffe6\027\uffe6\032\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\042\uffe6\044\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\053\uffe6\001\002\000\006\007\uffd3\015" +
    "\uffd3\001\002\000\006\007\uffd5\015\uffd5\001\002\000\006" +
    "\007\uffd4\015\uffd4\001\002\000\044\002\uffe7\003\uffe7\023" +
    "\uffe7\027\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\042\uffe7\044\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\053\uffe7\001\002\000\032\004\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\043\uffc7\045\uffc7\001\002\000\016\006\046\011\047" +
    "\024\052\025\051\026\050\053\045\001\002\000\016\006" +
    "\046\011\047\024\052\025\051\026\050\053\045\001\002" +
    "\000\032\004\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\020\uffc8\021\uffc8\022\uffc8\043\uffc8\045\uffc8" +
    "\001\002\000\032\004\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\020\uffc9\021\uffc9\022\uffc9\043\uffc9" +
    "\045\uffc9\001\002\000\032\004\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\020\uffca\021\uffca\022\uffca" +
    "\043\uffca\045\uffca\001\002\000\014\004\060\010\054\011" +
    "\055\012\057\013\056\001\002\000\016\006\046\011\047" +
    "\024\052\025\051\026\050\053\045\001\002\000\016\006" +
    "\046\011\047\024\052\025\051\026\050\053\045\001\002" +
    "\000\016\006\046\011\047\024\052\025\051\026\050\053" +
    "\045\001\002\000\016\006\046\011\047\024\052\025\051" +
    "\026\050\053\045\001\002\000\044\002\ufff8\003\ufff8\023" +
    "\ufff8\027\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\042\ufff8\044\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\053\ufff8\001\002\000\032\004\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\043\uffcd\045\uffcd\001\002\000\032\004\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\043\uffcc\045\uffcc\001\002\000\032\004\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\057\013\056\014\uffce\020" +
    "\uffce\021\uffce\022\uffce\043\uffce\045\uffce\001\002\000\032" +
    "\004\uffcf\007\uffcf\010\uffcf\011\uffcf\012\057\013\056\014" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\043\uffcf\045\uffcf\001\002" +
    "\000\032\004\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\020\uffd0\021\uffd0\022\uffd0\043\uffd0\045\uffd0" +
    "\001\002\000\014\007\067\010\054\011\055\012\057\013" +
    "\056\001\002\000\032\004\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\020\uffcb\021\uffcb\022\uffcb\043" +
    "\uffcb\045\uffcb\001\002\000\044\002\ufff1\003\ufff1\023\ufff1" +
    "\027\ufff1\032\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\042\ufff1\044\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\053\ufff1\001\002\000\020\006\046\011\047\024\052\025" +
    "\051\026\050\030\072\053\045\001\002\000\006\007\uffc5" +
    "\014\uffc5\001\002\000\006\007\075\014\076\001\002\000" +
    "\016\007\uffc4\010\054\011\055\012\057\013\056\014\uffc4" +
    "\001\002\000\004\004\100\001\002\000\020\006\046\011" +
    "\047\024\052\025\051\026\050\030\072\053\045\001\002" +
    "\000\006\007\uffc6\014\uffc6\001\002\000\044\002\ufffd\003" +
    "\ufffd\023\ufffd\027\ufffd\032\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\042\ufffd\044\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\053\ufffd\001\002\000\004\004\102\001\002" +
    "\000\044\002\ufff9\003\ufff9\023\ufff9\027\ufff9\032\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9\044\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\001\002\000" +
    "\004\004\104\001\002\000\044\002\ufffb\003\ufffb\023\ufffb" +
    "\027\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\042\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\053\ufffb\001\002\000\016\006\046\011\047\024\052\025" +
    "\051\026\050\053\045\001\002\000\004\007\114\001\002" +
    "\000\016\010\054\011\055\012\057\013\056\020\110\021" +
    "\111\001\002\000\016\006\046\011\047\024\052\025\051" +
    "\026\050\053\045\001\002\000\016\006\046\011\047\024" +
    "\052\025\051\026\050\053\045\001\002\000\014\007\uffc3" +
    "\010\054\011\055\012\057\013\056\001\002\000\014\007" +
    "\uffc2\010\054\011\055\012\057\013\056\001\002\000\004" +
    "\022\115\001\002\000\032\003\013\027\017\032\005\034" +
    "\007\035\020\036\004\037\016\040\015\042\012\044\014" +
    "\046\011\053\021\001\002\000\034\003\013\023\120\027" +
    "\017\032\005\034\007\035\020\036\004\037\016\040\015" +
    "\042\012\044\014\046\011\053\021\001\002\000\044\002" +
    "\uffff\003\uffff\023\uffff\027\uffff\032\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\040\uffff\042\uffff\044\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\053\uffff\001\002\000\046\002\ufff7" +
    "\003\ufff7\023\ufff7\027\ufff7\032\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\122\042\ufff7\044\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\053\ufff7\001\002\000\046\002" +
    "\ufff5\003\ufff5\023\ufff5\027\ufff5\032\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\135\042\ufff5\044\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\053\ufff5\001\002\000\006" +
    "\022\123\040\124\001\002\000\032\003\013\027\017\032" +
    "\005\034\007\035\020\036\004\037\016\040\015\042\012" +
    "\044\014\046\011\053\021\001\002\000\004\006\125\001" +
    "\002\000\016\006\046\011\047\024\052\025\051\026\050" +
    "\053\045\001\002\000\004\007\127\001\002\000\004\022" +
    "\130\001\002\000\032\003\013\027\017\032\005\034\007" +
    "\035\020\036\004\037\016\040\015\042\012\044\014\046" +
    "\011\053\021\001\002\000\034\003\013\023\132\027\017" +
    "\032\005\034\007\035\020\036\004\037\016\040\015\042" +
    "\012\044\014\046\011\053\021\001\002\000\046\002\uffd1" +
    "\003\uffd1\023\uffd1\027\uffd1\032\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\053\uffd1\001\002\000\034\003" +
    "\013\023\134\027\017\032\005\034\007\035\020\036\004" +
    "\037\016\040\015\042\012\044\014\046\011\053\021\001" +
    "\002\000\044\002\ufff6\003\ufff6\023\ufff6\027\ufff6\032\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\042\ufff6\044" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\001\002" +
    "\000\006\022\136\040\137\001\002\000\032\003\013\027" +
    "\017\032\005\034\007\035\020\036\004\037\016\040\015" +
    "\042\012\044\014\046\011\053\021\001\002\000\004\006" +
    "\140\001\002\000\016\006\046\011\047\024\052\025\051" +
    "\026\050\053\045\001\002\000\004\007\142\001\002\000" +
    "\004\022\143\001\002\000\032\003\013\027\017\032\005" +
    "\034\007\035\020\036\004\037\016\040\015\042\012\044" +
    "\014\046\011\053\021\001\002\000\034\003\013\023\145" +
    "\027\017\032\005\034\007\035\020\036\004\037\016\040" +
    "\015\042\012\044\014\046\011\053\021\001\002\000\046" +
    "\002\uffd2\003\uffd2\023\uffd2\027\uffd2\032\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\001\002\000" +
    "\034\003\013\023\147\027\017\032\005\034\007\035\020" +
    "\036\004\037\016\040\015\042\012\044\014\046\011\053" +
    "\021\001\002\000\044\002\ufff4\003\ufff4\023\ufff4\027\ufff4" +
    "\032\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\042" +
    "\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4" +
    "\001\002\000\004\053\151\001\002\000\004\052\152\001" +
    "\002\000\016\006\046\011\047\024\052\025\051\026\050" +
    "\053\045\001\002\000\014\010\054\011\055\012\057\013" +
    "\056\043\154\001\002\000\016\006\046\011\047\024\052" +
    "\025\051\026\050\053\045\001\002\000\014\010\054\011" +
    "\055\012\057\013\056\045\156\001\002\000\016\006\046" +
    "\011\047\024\052\025\051\026\050\053\045\001\002\000" +
    "\014\010\054\011\055\012\057\013\056\022\160\001\002" +
    "\000\032\003\013\027\017\032\005\034\007\035\020\036" +
    "\004\037\016\040\015\042\012\044\014\046\011\053\021" +
    "\001\002\000\034\003\013\023\162\027\017\032\005\034" +
    "\007\035\020\036\004\037\016\040\015\042\012\044\014" +
    "\046\011\053\021\001\002\000\044\002\ufff3\003\ufff3\023" +
    "\ufff3\027\ufff3\032\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\040\ufff3\042\ufff3\044\ufff3\046\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\053\ufff3\001\002\000\004\004\164\001\002\000\044" +
    "\002\ufffa\003\ufffa\023\ufffa\027\ufffa\032\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\042\ufffa\044\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\053\ufffa\001\002\000\016\006" +
    "\046\011\047\024\052\025\051\026\050\053\045\001\002" +
    "\000\014\007\167\010\054\011\055\012\057\013\056\001" +
    "\002\000\004\022\170\001\002\000\006\047\173\051\172" +
    "\001\002\000\010\023\uffe2\047\uffe2\051\uffe2\001\002\000" +
    "\004\005\203\001\002\000\004\024\177\001\002\000\010" +
    "\023\175\047\173\051\172\001\002\000\044\002\uffe5\003" +
    "\uffe5\023\uffe5\027\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\042\uffe5\044\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\053\uffe5\001\002\000\010\023\uffe1\047\uffe1" +
    "\051\uffe1\001\002\000\004\005\200\001\002\000\032\003" +
    "\013\027\017\032\005\034\007\035\020\036\004\037\016" +
    "\040\015\042\012\044\014\046\011\053\021\001\002\000" +
    "\034\003\013\027\017\032\005\034\007\035\020\036\004" +
    "\037\016\040\015\042\012\044\014\046\011\050\202\053" +
    "\021\001\002\000\010\023\uffe0\047\uffe0\051\uffe0\001\002" +
    "\000\032\003\013\027\017\032\005\034\007\035\020\036" +
    "\004\037\016\040\015\042\012\044\014\046\011\053\021" +
    "\001\002\000\040\003\013\023\uffdf\027\017\032\005\034" +
    "\007\035\020\036\004\037\016\040\015\042\012\044\014" +
    "\046\011\047\uffdf\051\uffdf\053\021\001\002\000\004\004" +
    "\206\001\002\000\044\002\uffe4\003\uffe4\023\uffe4\027\uffe4" +
    "\032\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\044\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4" +
    "\001\002\000\004\053\276\001\002\000\004\053\263\001" +
    "\002\000\004\006\251\001\002\000\004\006\244\001\002" +
    "\000\004\053\214\001\002\000\004\006\215\001\002\000" +
    "\012\007\220\027\222\037\217\042\216\001\002\000\004" +
    "\053\243\001\002\000\004\053\242\001\002\000\004\022" +
    "\237\001\002\000\006\007\225\015\224\001\002\000\004" +
    "\053\223\001\002\000\006\007\uffdc\015\uffdc\001\002\000" +
    "\010\027\233\037\231\042\232\001\002\000\004\022\226" +
    "\001\002\000\032\003\013\027\017\032\005\034\007\035" +
    "\020\036\004\037\016\040\015\042\012\044\014\046\011" +
    "\053\021\001\002\000\034\003\013\023\230\027\017\032" +
    "\005\034\007\035\020\036\004\037\016\040\015\042\012" +
    "\044\014\046\011\053\021\001\002\000\044\002\uffe8\003" +
    "\uffe8\023\uffe8\027\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\042\uffe8\044\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\053\uffe8\001\002\000\004\053\236\001\002" +
    "\000\004\053\235\001\002\000\004\053\234\001\002\000" +
    "\006\007\uffd9\015\uffd9\001\002\000\006\007\uffda\015\uffda" +
    "\001\002\000\006\007\uffdb\015\uffdb\001\002\000\032\003" +
    "\013\027\017\032\005\034\007\035\020\036\004\037\016" +
    "\040\015\042\012\044\014\046\011\053\021\001\002\000" +
    "\034\003\013\023\241\027\017\032\005\034\007\035\020" +
    "\036\004\037\016\040\015\042\012\044\014\046\011\053" +
    "\021\001\002\000\044\002\uffec\003\uffec\023\uffec\027\uffec" +
    "\032\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042" +
    "\uffec\044\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053\uffec" +
    "\001\002\000\006\007\uffde\015\uffde\001\002\000\006\007" +
    "\uffdd\015\uffdd\001\002\000\004\007\245\001\002\000\004" +
    "\022\246\001\002\000\032\003\013\027\017\032\005\034" +
    "\007\035\020\036\004\037\016\040\015\042\012\044\014" +
    "\046\011\053\021\001\002\000\034\003\013\023\250\027" +
    "\017\032\005\034\007\035\020\036\004\037\016\040\015" +
    "\042\012\044\014\046\011\053\021\001\002\000\044\002" +
    "\ufff0\003\ufff0\023\ufff0\027\ufff0\032\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\042\ufff0\044\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\051\ufff0\053\ufff0\001\002\000\012\007\252" +
    "\027\222\037\217\042\216\001\002\000\004\022\260\001" +
    "\002\000\006\007\254\015\224\001\002\000\004\022\255" +
    "\001\002\000\032\003\013\027\017\032\005\034\007\035" +
    "\020\036\004\037\016\040\015\042\012\044\014\046\011" +
    "\053\021\001\002\000\034\003\013\023\257\027\017\032" +
    "\005\034\007\035\020\036\004\037\016\040\015\042\012" +
    "\044\014\046\011\053\021\001\002\000\044\002\uffeb\003" +
    "\uffeb\023\uffeb\027\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\042\uffeb\044\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\053\uffeb\001\002\000\032\003\013\027\017" +
    "\032\005\034\007\035\020\036\004\037\016\040\015\042" +
    "\012\044\014\046\011\053\021\001\002\000\034\003\013" +
    "\023\262\027\017\032\005\034\007\035\020\036\004\037" +
    "\016\040\015\042\012\044\014\046\011\053\021\001\002" +
    "\000\044\002\uffef\003\uffef\023\uffef\027\uffef\032\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef\044\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\053\uffef\001\002\000" +
    "\004\006\264\001\002\000\012\007\265\027\222\037\217" +
    "\042\216\001\002\000\004\022\273\001\002\000\006\007" +
    "\267\015\224\001\002\000\004\022\270\001\002\000\032" +
    "\003\013\027\017\032\005\034\007\035\020\036\004\037" +
    "\016\040\015\042\012\044\014\046\011\053\021\001\002" +
    "\000\034\003\013\023\272\027\017\032\005\034\007\035" +
    "\020\036\004\037\016\040\015\042\012\044\014\046\011" +
    "\053\021\001\002\000\044\002\uffea\003\uffea\023\uffea\027" +
    "\uffea\032\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\042\uffea\044\uffea\046\uffea\047\uffea\050\uffea\051\uffea\053" +
    "\uffea\001\002\000\032\003\013\027\017\032\005\034\007" +
    "\035\020\036\004\037\016\040\015\042\012\044\014\046" +
    "\011\053\021\001\002\000\034\003\013\023\275\027\017" +
    "\032\005\034\007\035\020\036\004\037\016\040\015\042" +
    "\012\044\014\046\011\053\021\001\002\000\044\002\uffee" +
    "\003\uffee\023\uffee\027\uffee\032\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\042\uffee\044\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\053\uffee\001\002\000\004\006\277\001" +
    "\002\000\012\007\300\027\222\037\217\042\216\001\002" +
    "\000\004\022\306\001\002\000\006\007\302\015\224\001" +
    "\002\000\004\022\303\001\002\000\032\003\013\027\017" +
    "\032\005\034\007\035\020\036\004\037\016\040\015\042" +
    "\012\044\014\046\011\053\021\001\002\000\034\003\013" +
    "\023\305\027\017\032\005\034\007\035\020\036\004\037" +
    "\016\040\015\042\012\044\014\046\011\053\021\001\002" +
    "\000\044\002\uffe9\003\uffe9\023\uffe9\027\uffe9\032\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\044\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9\001\002\000" +
    "\032\003\013\027\017\032\005\034\007\035\020\036\004" +
    "\037\016\040\015\042\012\044\014\046\011\053\021\001" +
    "\002\000\034\003\013\023\310\027\017\032\005\034\007" +
    "\035\020\036\004\037\016\040\015\042\012\044\014\046" +
    "\011\053\021\001\002\000\044\002\uffed\003\uffed\023\uffed" +
    "\027\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\042\uffed\044\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\053\uffed\001\002\000\016\006\046\011\047\024\052\025" +
    "\051\026\050\053\045\001\002\000\004\007\313\001\002" +
    "\000\004\022\314\001\002\000\032\003\013\027\017\032" +
    "\005\034\007\035\020\036\004\037\016\040\015\042\012" +
    "\044\014\046\011\053\021\001\002\000\034\003\013\023" +
    "\316\027\017\032\005\034\007\035\020\036\004\037\016" +
    "\040\015\042\012\044\014\046\011\053\021\001\002\000" +
    "\044\002\ufffc\003\ufffc\023\ufffc\027\ufffc\032\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\042\ufffc\044\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\010\002\021\003\005\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\052\001\001\000\004\013" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\065\001\001\000\004\005\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\063\001\001\000\004\005\062\001\001\000" +
    "\004\005\061\001\001\000\004\005\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\073\007" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\073\007\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\106\010\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\112\001\001\000\004\005\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\115\004\007\001\001\000\004\004\116\001" +
    "\001\000\002\001\001\000\004\006\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\132\004\007\001" +
    "\001\000\002\001\001\000\006\005\106\010\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\130\004" +
    "\007\001\001\000\004\004\116\001\001\000\002\001\001" +
    "\000\004\004\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\145\004\007\001\001\000\002\001\001" +
    "\000\006\005\106\010\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\143\004\007\001\001\000\004" +
    "\004\116\001\001\000\002\001\001\000\004\004\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\152\001\001\000\002\001\001\000\004\005" +
    "\154\001\001\000\002\001\001\000\004\005\156\001\001" +
    "\000\002\001\001\000\006\003\160\004\007\001\001\000" +
    "\004\004\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\170\014\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\200\004\007\001\001\000" +
    "\004\004\116\001\001\000\002\001\001\000\006\003\203" +
    "\004\007\001\001\000\004\004\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\226\004\007\001\001\000\004\004" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\237\004\007\001\001" +
    "\000\004\004\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\246\004\007\001\001\000\004\004\116\001" +
    "\001\000\002\001\001\000\004\012\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\255\004\007\001\001\000\004\004\116\001\001\000\002" +
    "\001\001\000\006\003\260\004\007\001\001\000\004\004" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\270\004\007\001\001\000\004" +
    "\004\116\001\001\000\002\001\001\000\006\003\273\004" +
    "\007\001\001\000\004\004\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\303" +
    "\004\007\001\001\000\004\004\116\001\001\000\002\001" +
    "\001\000\006\003\306\004\007\001\001\000\004\004\116" +
    "\001\001\000\002\001\001\000\006\005\106\010\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\314" +
    "\004\007\001\001\000\004\004\116\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public static LinkedList<String> lista = new LinkedList<String>();
    public static LinkedList<Object> valores = new LinkedList<Object>();
    public static LinkedList<String> ops = new LinkedList<String>();
    public static LinkedList<Object> listaIns = new LinkedList<Object>();
    public static LinkedList<Instruccion> defecto = new LinkedList<Instruccion>();

    public void syntax_error(Symbol s){
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba: " +s.value+".");
            String a = "Error en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba: " +s.value+".";
            escribir(a);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
            String a = "Error en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.";
            escribir(a);
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }
    public void escribir(String a)
    {
        String rutaArchivo = "jiji.txt"; // Ruta del archivo existente

        try {
            FileWriter fileWriter = new FileWriter(rutaArchivo, true); // El segundo parámetro "true" habilita el modo de agregado
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

            String contenido = a;

            bufferedWriter.write(contenido);
            bufferedWriter.newLine();
            bufferedWriter.close(); // Cierra el BufferedWriter


        } catch (IOException e) {
            System.out.println("Ocurrió un error al agregar líneas al archivo: " + e.getMessage());
        }
    }
    public void agregar(String s){
        lista.add(s);
    }
    public void ver(){
        for (String s : ops) {
            System.out.println("op : "+s);
        }
    }
    public void limpiar(){
        System.out.println("----Limpiando lista");
        lista.clear();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    parser.AST=a;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new LinkedList<>(); RESULT.add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= RESCRIBIR PARENTA expresion_cadena PARENTC PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Escribir(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= RMIENTRAS PARENTA expresion_logica PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Mientras(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= RENTERO IDENTIFICADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(a,Tipo.NUMERO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= RCADENA IDENTIFICADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(a,Tipo.CARACTER);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= RFLOTANTE IDENTIFICADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Declaracion(a,Tipo.DECIMAL);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= IDENTIFICADOR IGUAL expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Asignacion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= RSI PARENTA expresion_logica PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Si(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RSI PARENTA expresion_logica PARENTC LLAVEA instrucciones LLAVEB RSINO LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Si(a,b,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= RSI PARENTA expresion_logica PARENTC LLAVEA instrucciones LLAVEB else_ifs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Si(a,b,l,null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= RSI PARENTA expresion_logica PARENTC LLAVEA instrucciones LLAVEB else_ifs RSINO LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Si(a,b,l,c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RPARA RENTERO IDENTIFICADOR IGUAL expresion RHASTA expresion RCONPASO expresion LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operacion c = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Para(a,b,c,d,x); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= IDENTIFICADOR INCREMENTO PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Incremento(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= IDENTIFICADOR DECREMENTO PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=new Decremento(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= FUN MAIN PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= FUN IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= FUN RENTERO IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= FUN RCADENA IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= FUN RFLOTANTE IDENTIFICADOR PARENTA PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= FUN IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= FUN RENTERO IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= FUN RCADENA IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= FUN RFLOTANTE IDENTIFICADOR PARENTA parametros PARENTC LLAVEA instrucciones LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Funcion(a,b,lista);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= IDENTIFICADOR PARENTA PARENTC PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=new EjecutarFuncion(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= IDENTIFICADOR PARENTA llamada PARENTC PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT=new EjecutarFuncion(a,valores);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RSEGUN PARENTA expresion PARENTC LLAVEA cases LLAVEB 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		RESULT= new Segun(a, ops, listaIns, defecto);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= RLEER IDENTIFICADOR PUNTOCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Leer(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cases ::= casos 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cases ::= cases casos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // casos ::= RCASE ENTERO DOSPUNTOS instrucciones RBREAK 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 ops.add(a.toString()); listaIns.add(b); System.out.println("encontro un case");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // casos ::= RDEFECTO DOSPUNTOS instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		defecto=a; System.out.println("encontro case por defecto");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros ::= RENTERO IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(a,Tipo.NUMERO); agregar(a.toString()); System.out.println("parametro entero "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros ::= RCADENA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Declaracion(a,Tipo.CARACTER); agregar(a.toString()); System.out.println("parametro cadena");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros ::= RFLOTANTE IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Declaracion(a,Tipo.DECIMAL); agregar(a.toString());  System.out.println("parametro decimal");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= parametros COMA RENTERO IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		agregar(b.toString()); RESULT=new Declaracion(b,Tipo.NUMERO); System.out.println("parametro entero2");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametros COMA RCADENA IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		agregar(b.toString()); RESULT=new Declaracion(b,Tipo.CARACTER); System.out.println("parametro entero2");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= parametros COMA RFLOTANTE IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		agregar(b.toString()); RESULT=new Declaracion(b,Tipo.DECIMAL); System.out.println("parametro entero2");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores .add(new Double(a)); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores .add(a); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamada ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores .add(new Double(a)); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada ::= llamada COMA ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add(new Double(a)); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // llamada ::= llamada COMA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add(a); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // llamada ::= llamada COMA DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valores.add(new Double(a)); System.out.println("VALOR "+a.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // else_ifs ::= else_ifs RSINO RSI PARENTA expresion_logica PARENTC LLAVEA instrucciones LLAVEB 
            {
              LinkedList<Instruccion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= l; RESULT.add(new Si(a,b));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // else_ifs ::= RSINO RSI PARENTA expresion_logica PARENTC LLAVEA instrucciones LLAVEB 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= new LinkedList<>(); RESULT.add(new Si(a,b));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= MENOS expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MAS expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MENOS expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion POR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion DIV expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= PARENTA expresion PARENTC 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= ENTERO 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= DECIMAL 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(new Double(a));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= CARACTER 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= IDENTIFICADOR 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_cadena ::= expresion_cadena CONCAT expresion_cadena 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b,Operacion.Tipo_operacion.CONCATENACION);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_cadena",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_cadena ::= CADENA 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_cadena",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_cadena ::= expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_cadena",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_logica ::= expresion MAYOR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MAYOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_logica ::= expresion MENOR expresion 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MENOR_QUE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
