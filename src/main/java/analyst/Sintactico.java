
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyst;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\017\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\006\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\006\000\002\010\007" +
    "\000\002\010\007\000\002\011\007\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\013\000\002" +
    "\013\011\000\002\014\017\000\002\015\011\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\024\005\026\006\006\007\025\012\012\017" +
    "\030\021\027\022\011\023\005\040\020\001\002\000\026" +
    "\002\001\005\026\006\006\007\025\012\012\017\030\021" +
    "\027\022\011\023\005\040\020\001\002\000\006\033\ufff1" +
    "\040\ufff1\001\002\000\004\030\140\001\002\000\036\002" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\013\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\040" +
    "\uffea\001\002\000\036\002\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\040\uffff\001\002\000\006\033\ufff2" +
    "\040\ufff2\001\002\000\004\030\122\001\002\000\036\002" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\040" +
    "\ufffc\001\002\000\004\040\112\001\002\000\004\002\110" +
    "\001\002\000\036\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\040\ufffd\001\002\000\036\002\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\040\ufff9\001" +
    "\002\000\004\033\105\001\002\000\036\002\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\040\ufffb\001\002" +
    "\000\036\002\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\040\uffeb\001\002\000\036\002\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\040\ufffa\001\002\000" +
    "\036\002\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\040\uffec\001\002\000\004\030\074\001\002\000\004" +
    "\030\065\001\002\000\006\033\ufff3\040\ufff3\001\002\000" +
    "\004\030\031\001\002\000\012\030\035\036\032\037\033" +
    "\040\036\001\002\000\024\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\001\002" +
    "\000\024\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\001\002\000\004\031\060" +
    "\001\002\000\012\030\035\036\032\037\033\040\036\001" +
    "\002\000\024\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\001\002\000\020\024" +
    "\041\025\042\026\044\027\046\033\040\034\043\035\045" +
    "\001\002\000\012\030\035\036\032\037\033\040\036\001" +
    "\002\000\012\030\035\036\032\037\033\040\036\001\002" +
    "\000\012\030\035\036\032\037\033\040\036\001\002\000" +
    "\012\030\035\036\032\037\033\040\036\001\002\000\012" +
    "\030\035\036\032\037\033\040\036\001\002\000\012\030" +
    "\035\036\032\037\033\040\036\001\002\000\012\030\035" +
    "\036\032\037\033\040\036\001\002\000\024\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\001\002\000\014\024\041\025\042\026\044\027" +
    "\046\031\uffdc\001\002\000\024\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001" +
    "\002\000\014\024\041\025\042\026\044\027\046\031\uffdd" +
    "\001\002\000\024\024\uffe4\025\uffe4\026\044\027\046\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\024" +
    "\024\uffe5\025\uffe5\026\044\027\046\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\001\002\000\014\024\041\025\042" +
    "\026\044\027\046\031\uffdb\001\002\000\014\024\041\025" +
    "\042\026\044\027\046\031\057\001\002\000\024\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\001\002\000\004\015\061\001\002\000\024" +
    "\005\026\006\006\007\025\012\012\017\030\021\027\022" +
    "\011\023\005\040\020\001\002\000\026\005\026\006\006" +
    "\007\025\012\012\017\030\020\064\021\027\022\011\023" +
    "\005\040\020\001\002\000\036\002\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\040\ufffe\001\002\000\036" +
    "\002\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\040\uffe6\001\002\000\006\004\066\040\067\001\002\000" +
    "\004\031\072\001\002\000\004\031\070\001\002\000\004" +
    "\032\071\001\002\000\036\002\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\040\uffee\001\002\000\004\032" +
    "\073\001\002\000\036\002\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\040\uffef\001\002\000\012\030\035" +
    "\036\032\037\033\040\036\001\002\000\004\031\076\001" +
    "\002\000\004\015\077\001\002\000\024\005\026\006\006" +
    "\007\025\012\012\017\030\021\027\022\011\023\005\040" +
    "\020\001\002\000\030\005\026\006\006\007\025\010\101" +
    "\011\102\012\012\017\030\021\027\022\011\023\005\040" +
    "\020\001\002\000\024\005\026\006\006\007\025\012\012" +
    "\017\030\021\027\022\011\023\005\040\020\001\002\000" +
    "\036\002\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\040\uffe8\001\002\000\026\005\026\006\006\007\025" +
    "\011\104\012\012\017\030\021\027\022\011\023\005\040" +
    "\020\001\002\000\036\002\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\040\uffe9\001\002\000\012\030\035" +
    "\036\032\037\033\040\036\001\002\000\014\024\041\025" +
    "\042\026\044\027\046\032\107\001\002\000\036\002\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\040\ufff0" +
    "\001\002\000\004\002\000\001\002\000\004\032\121\001" +
    "\002\000\014\021\027\022\011\023\005\032\ufff7\033\113" +
    "\001\002\000\014\003\117\030\035\036\032\037\033\040" +
    "\036\001\002\000\004\033\115\001\002\000\012\030\035" +
    "\036\032\037\033\040\036\001\002\000\014\024\041\025" +
    "\042\026\044\027\046\032\ufff4\001\002\000\004\032\ufff5" +
    "\001\002\000\014\024\041\025\042\026\044\027\046\032" +
    "\ufff6\001\002\000\036\002\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\013\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\040\ufff8\001\002\000\004\040\123" +
    "\001\002\000\004\033\124\001\002\000\012\030\035\036" +
    "\032\037\033\040\036\001\002\000\014\024\041\025\042" +
    "\026\044\027\046\031\126\001\002\000\004\014\127\001" +
    "\002\000\006\036\131\040\132\001\002\000\004\016\133" +
    "\001\002\000\006\015\uffda\016\uffda\001\002\000\006\015" +
    "\uffd9\016\uffd9\001\002\000\006\036\131\040\132\001\002" +
    "\000\004\015\135\001\002\000\024\005\026\006\006\007" +
    "\025\012\012\017\030\021\027\022\011\023\005\040\020" +
    "\001\002\000\026\005\026\006\006\007\025\012\012\013" +
    "\137\017\030\021\027\022\011\023\005\040\020\001\002" +
    "\000\036\002\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\040\uffe7\001\002\000\004\040\141\001\002\000" +
    "\004\031\142\001\002\000\004\032\143\001\002\000\036" +
    "\002\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\040\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\032\002\014\003\003\004\007\005\015\006" +
    "\013\007\012\010\020\011\022\012\016\013\023\014\021" +
    "\015\006\001\001\000\026\004\062\005\015\006\013\007" +
    "\012\010\020\011\022\012\016\013\023\014\021\015\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\036\021\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\054\001\001\000\004\020\053\001\001" +
    "\000\004\020\052\001\001\000\004\020\051\001\001\000" +
    "\004\020\050\001\001\000\004\020\047\001\001\000\004" +
    "\020\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\061\004\007\005\015" +
    "\006\013\007\012\010\020\011\022\012\016\013\023\014" +
    "\021\015\006\001\001\000\026\004\062\005\015\006\013" +
    "\007\012\010\020\011\022\012\016\013\023\014\021\015" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\036\021\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\077\004\007\005\015\006\013" +
    "\007\012\010\020\011\022\012\016\013\023\014\021\015" +
    "\006\001\001\000\026\004\062\005\015\006\013\007\012" +
    "\010\020\011\022\012\016\013\023\014\021\015\006\001" +
    "\001\000\030\003\102\004\007\005\015\006\013\007\012" +
    "\010\020\011\022\012\016\013\023\014\021\015\006\001" +
    "\001\000\002\001\001\000\026\004\062\005\015\006\013" +
    "\007\012\010\020\011\022\012\016\013\023\014\021\015" +
    "\006\001\001\000\002\001\001\000\004\020\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\113\001\001\000\004\020\117" +
    "\001\001\000\002\001\001\000\004\020\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\133\001\001\000\002\001\001" +
    "\000\030\003\135\004\007\005\015\006\013\007\012\010" +
    "\020\011\022\012\016\013\023\014\021\015\006\001\001" +
    "\000\026\004\062\005\015\006\013\007\012\010\020\011" +
    "\022\012\016\013\023\014\021\015\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    List<String> lista = new ArrayList<String>();
      private Map<Object, Object> variables = new HashMap<>();
    //Metodo al que se llama automaticamente ante algun error sintactico

    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);


    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);

    }
public void instrEscribir(String e) {
            System.out.println("--> " + e);
            resultado += e + "\n";
        }

public void instrLeer(String id) {
    Scanner scanner = new Scanner(System.in);
    System.out.print("--> ");
    String input = scanner.nextLine();
    Object valor = null;

    if (variables.containsKey(id)) {
        Object tipo = variables.get(id);

        if (tipo.equals("int")) {
            try {
                valor = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("Error de formato: se esperaba un entero");
            }
        } else if (tipo.equals("double")) {
            try {
                valor = Double.parseDouble(input);
            } catch (NumberFormatException e) {
                System.out.println("Error de formato: se esperaba un flotante");
            }
        } else if (tipo.equals("String")) {
            valor = input;
        }
    } else {
        System.out.println("Error: la variable no ha sido declarada");
    }

    if (valor != null) {
        variables.put(id, valor);
    }
}
private Object evaluarExpresion(Object expresion) {
    if (expresion instanceof Integer) {
        return expresion;
    } else if (expresion instanceof String) {
        String expr = (String) expresion;
        if (expr.matches("\\d+")) {
            return Integer.parseInt(expr);
        } else if (expr.matches("\\d+\\.\\d+")) {
            return Double.parseDouble(expr);
        } else {
            System.out.println("Error de formato de expresión");
        }
    } else {
        System.out.println("Error de tipo de expresión");
    }
    return null;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= escritura 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= lectura 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipo_variable declaracion_variable puntocoma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("------------------ declaracion"); variables.put(d, t); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_variable ::= id igual expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variable ::= id igual error 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("Error de asignación: tipo de dato incorrecto"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_variable ::= id tipo_variable igual expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            Object valor = evaluarExpresion(e);
                            if (valor != null) {
                                if (t.equals("int") && valor instanceof Integer) {
                                    variables.put(id, valor);
                                } else if (t.equals("double") && valor instanceof Double) {
                                    variables.put(id, valor);
                                } else if (t.equals("String") && valor instanceof String) {
                                    variables.put(id, valor);
                                } else {
                                    System.out.println("Error de asignación: tipo de dato incorrecto");
                                }
                            }
                            RESULT = id;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_variable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_variable ::= ENTERO 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_variable ::= FLOTANTE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_variable ::= CADENA 
            {
              Object RESULT =null;
		 RESULT = "String"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_variable",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignacion ::= id igual expresion puntocoma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
    Object valor = null;
    if (variables.containsKey(id)) {
        valor = evaluarExpresion(e);
        variables.put(id, valor);
    } else {
        System.out.println("Error de asignación: variable no declarada");
    }

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // escritura ::= ESCRIBIR parenta comilla parentc puntocoma 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
    System.out.println("------------------ escribir");
    Object valor = null;

    if (variables.containsKey(e1)) {
        valor = variables.get(e1);
    } else {

    }

    if (valor != null) {
        instrEscribir(valor.toString());}
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("escritura",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // escritura ::= ESCRIBIR parenta id parentc puntocoma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
    System.out.println("------------------ escribir");
    Object valor = null;

    if (variables.containsKey(id)) {
        valor = variables.get(id);
    } else {

    }

    if (valor != null) {
        instrEscribir(valor.toString());}
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("escritura",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lectura ::= LEER parenta id parentc puntocoma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		System.out.println("------------------ leer"); instrLeer(id.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lectura",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= sentIf 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= sentFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= sentWhile 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentIf ::= SI parenta condicion parentc HACER instrucciones SINO instrucciones FINSI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		if (e1==true){RESULT = true; System.out.println("------------------ si se puede TRUE"); } else{RESULT = false; System.out.println("------------------ no se puede FALSE"); return null;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentIf ::= SI parenta condicion parentc HACER instrucciones FINSI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentFor ::= PARA parenta id igual expresion parentc HASTA aux CON_PASO aux HACER instrucciones FINPARA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentFor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentWhile ::= MIENTRAS parenta condicion parentc HACER instrucciones FINMIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentWhile",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion mas expresion 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion menos expresion 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion mult expresion 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion div expresion 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= parenta expresion parentc 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= numero 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= decimal 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = variables.get(id); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= expresion menor expresion 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if (e1<=e2){RESULT = true; System.out.println("------------------ TRUE"); } else{RESULT = false; System.out.println("------------------ FALSE");} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= expresion mayor expresion 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if (e1>=e2){RESULT = true; System.out.println("------------------ TRUE");} else{RESULT = false; System.out.println("------------------ FALSE");} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= expresion igual expresion 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if (e1==e2){RESULT = true; System.out.println("------------------ TRUE");} else{RESULT = false; System.out.println("------------------ FALSE");} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aux ::= numero 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aux",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aux ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aux",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
