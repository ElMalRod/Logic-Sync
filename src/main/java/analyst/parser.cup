package analyst;
import controladores.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import controladores.Simbolo.Tipo;
parser code
{:
    public LinkedList<Instruccion> AST;
    public static LinkedList<String> lista = new LinkedList<String>();
    public static LinkedList<Object> valores = new LinkedList<Object>();
    public static LinkedList<String> ops = new LinkedList<String>();
    public static LinkedList<Object> listaIns = new LinkedList<Object>();
    public static LinkedList<Instruccion> defecto = new LinkedList<Instruccion>();

    public void syntax_error(Symbol s){
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }

    public void agregar(String s){
        lista.add(s);
    }
    public void ver(){
        for (String s : ops) {
            System.out.println("op : "+s);
        }
    }
    public void limpiar(){
        System.out.println("----Limpiando lista");
        lista.clear();
    }
:}

terminal String PUNTOCOMA,DOSPUNTOS,PARENTA,PARENTC;
terminal String MAS,MENOS,POR,DIV,CONCAT, COMA;
terminal String INCREMENTO,DECREMENTO;
terminal String MENOR,MAYOR, LLAVEA, LLAVEB;
terminal String ENTERO;
terminal String DECIMAL;
terminal String CARACTER;
terminal String RFLOTANTE;
terminal String CADENA;
terminal String UMENOS, FUN, MAIN, RLEER;
terminal String RESCRIBIR, RMIENTRAS,RENTERO,RSI,RSINO,RCADENA;
terminal String RHASTA, RPARA, RCONPASO,RSEGUN, RCASE, RBREAK, RDEFECTO;
terminal String IGUAL;
terminal String IDENTIFICADOR;

non terminal ini;
non terminal LinkedList<Instruccion> instrucciones;
non terminal Instruccion instruccion;
non terminal Operacion expresion;
non terminal LinkedList<Instruccion> else_ifs;
non terminal Operacion expresion_cadena;
non terminal Operacion expresion_logica;
non terminal casos, parametros, llamada, cases;
precedence left CONCAT;
precedence left MAS,MENOS;
precedence left POR,DIV;
precedence right UMENOS;
precedence nonassoc INCREMENTO,DECREMENTO;

start with ini;

ini::=instrucciones:a{:
    parser.AST=a;
:}
;

instrucciones ::=
   instrucciones:a instruccion:b{:RESULT=a; RESULT.add(b);:}
 | instruccion:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
;

instruccion ::=
   RESCRIBIR   PARENTA expresion_cadena:a PARENTC PUNTOCOMA                                                                 {:RESULT=new Escribir(a);:}
 | RMIENTRAS    PARENTA expresion_logica:a PARENTC LLAVEA instrucciones:b LLAVEB                                      {:RESULT=new Mientras(a,b);:}
 | RENTERO      IDENTIFICADOR:a PUNTOCOMA                                                                                   {:RESULT=new Declaracion(a,Tipo.NUMERO);:}
 | RCADENA    IDENTIFICADOR:a PUNTOCOMA                                                                                     {:RESULT=new Declaracion(a,Tipo.CARACTER);:}
 | RFLOTANTE IDENTIFICADOR:a PUNTOCOMA                                                                                      {:RESULT=new Declaracion(a,Tipo.DECIMAL);:}
 | IDENTIFICADOR:a IGUAL expresion:b PUNTOCOMA                                                                              {:RESULT=new Asignacion(a,b);:}
 | RSI PARENTA expresion_logica:a PARENTC LLAVEA instrucciones:b LLAVEB                                                     {:RESULT=new Si(a,b);:}
 | RSI PARENTA expresion_logica:a PARENTC LLAVEA instrucciones:b LLAVEB  RSINO LLAVEA instrucciones:c LLAVEB                {:RESULT=new Si(a,b,c);:}
 | RSI PARENTA expresion_logica:a PARENTC LLAVEA instrucciones:b LLAVEB else_ifs:l                                          {:RESULT=new Si(a,b,l,null);:}
 | RSI PARENTA expresion_logica:a PARENTC LLAVEA instrucciones:b LLAVEB else_ifs:l RSINO LLAVEA instrucciones:c LLAVEB      {:RESULT=new Si(a,b,l,c);:}
 | RPARA RENTERO IDENTIFICADOR:x IGUAL expresion:a RHASTA expresion:b RCONPASO expresion:c LLAVEA instrucciones:d LLAVEB    {:RESULT=new Para(a,b,c,d,x); :}
 | IDENTIFICADOR:a INCREMENTO PUNTOCOMA                                                                                     {:RESULT=new Incremento(a);:}
 | IDENTIFICADOR:a DECREMENTO PUNTOCOMA                                                                                     {:RESULT=new Decremento(a);:}
 | FUN MAIN PARENTA PARENTC LLAVEA instrucciones:a LLAVEB                                                                   {:RESULT=new Funcion(a);:}
 | FUN IDENTIFICADOR:a PARENTA PARENTC LLAVEA instrucciones:b LLAVEB                                                        {:RESULT=new Funcion(a,b);:}
 | FUN RENTERO IDENTIFICADOR:a PARENTA PARENTC LLAVEA instrucciones:b LLAVEB                                                {:RESULT=new Funcion(a,b);:}
 | FUN RCADENA IDENTIFICADOR:a PARENTA PARENTC LLAVEA instrucciones:b LLAVEB                                                {:RESULT=new Funcion(a,b);:}
 | FUN RFLOTANTE IDENTIFICADOR:a PARENTA PARENTC LLAVEA instrucciones:b LLAVEB                                              {:RESULT=new Funcion(a,b);:}
 | FUN IDENTIFICADOR:a PARENTA parametros PARENTC LLAVEA instrucciones:b LLAVEB                                             {:RESULT=new Funcion(a,b,lista); :}
 | FUN RENTERO IDENTIFICADOR:a PARENTA parametros PARENTC LLAVEA instrucciones:b LLAVEB                                     {:RESULT=new Funcion(a,b,lista); :}
 | FUN RCADENA IDENTIFICADOR:a PARENTA parametros PARENTC LLAVEA instrucciones:b LLAVEB                                     {:RESULT=new Funcion(a,b,lista);:}
 | FUN RFLOTANTE IDENTIFICADOR:a PARENTA parametros PARENTC LLAVEA instrucciones:b LLAVEB                                   {:RESULT=new Funcion(a,b,lista);:}
 | IDENTIFICADOR:a PARENTA PARENTC PUNTOCOMA                                                                                {:RESULT=new EjecutarFuncion(a);:}
 | IDENTIFICADOR:a PARENTA llamada PARENTC PUNTOCOMA                                                                        {:RESULT=new EjecutarFuncion(a,valores);:}
 | RSEGUN PARENTA expresion:a PARENTC LLAVEA cases LLAVEB                                                                   {:RESULT= new Segun(a, ops, listaIns, defecto);:}
 | RLEER IDENTIFICADOR:a PUNTOCOMA                                                                                          {:RESULT=new Leer(a);:}
 | error
;
cases ::=
   casos {::}
 | cases casos:a {::}
 ;

casos ::=
   RCASE ENTERO:a DOSPUNTOS instrucciones:b RBREAK          {: ops.add(a.toString()); listaIns.add(b); System.out.println("encontro un case");:}
 | RDEFECTO DOSPUNTOS instrucciones:a                            {:defecto=a; System.out.println("encontro case por defecto");:}
 ;
parametros ::=
   RENTERO IDENTIFICADOR:a {: RESULT=new Declaracion(a,Tipo.NUMERO); agregar(a.toString()); System.out.println("parametro entero "+a.toString());:}
   | RCADENA IDENTIFICADOR:a {:RESULT=new Declaracion(a,Tipo.CARACTER); agregar(a.toString()); System.out.println("parametro cadena");:}
   | RFLOTANTE IDENTIFICADOR:a {:RESULT=new Declaracion(a,Tipo.DECIMAL); agregar(a.toString());  System.out.println("parametro decimal");:}
   | parametros:a COMA  RENTERO IDENTIFICADOR:b    {:agregar(b.toString()); RESULT=new Declaracion(b,Tipo.NUMERO); System.out.println("parametro entero2");:}
   | parametros:a COMA  RCADENA IDENTIFICADOR:b    {:agregar(b.toString()); RESULT=new Declaracion(b,Tipo.CARACTER); System.out.println("parametro entero2");:}
   | parametros:a COMA  RFLOTANTE IDENTIFICADOR:b    {:agregar(b.toString()); RESULT=new Declaracion(b,Tipo.DECIMAL); System.out.println("parametro entero2");:}
   ;
llamada ::=
    ENTERO:a {:valores .add(new Double(a)); System.out.println("VALOR "+a.toString());:}
    | CADENA:a {:valores .add(a); System.out.println("VALOR "+a.toString());:}
    | DECIMAL:a {:valores .add(new Double(a)); System.out.println("VALOR "+a.toString());:}
    | llamada COMA ENTERO:a {:valores.add(new Double(a)); System.out.println("VALOR "+a.toString());:}
    | llamada COMA CADENA:a {:valores.add(a); System.out.println("VALOR "+a.toString());:}
    | llamada COMA DECIMAL:a {:valores.add(new Double(a)); System.out.println("VALOR "+a.toString());:}
    ;
else_ifs ::= else_ifs:l RSINO RSI PARENTA expresion_logica:a PARENTC LLAVEA instrucciones:b LLAVEB      {:RESULT= l; RESULT.add(new Si(a,b));:}
                      | RSINO RSI PARENTA expresion_logica:a PARENTC LLAVEA instrucciones:b LLAVEB      {:RESULT= new LinkedList<>(); RESULT.add(new Si(a,b));:}
;



expresion ::=
    MENOS expresion:a                                        {:RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);:}%prec UMENOS
 |  expresion:a MAS        expresion:b                       {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);:}
 |  expresion:a MENOS      expresion:b                       {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);:}
 |  expresion:a POR        expresion:b                       {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);:}
 |  expresion:a DIV   expresion:b                            {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);:}
 |  PARENTA expresion:a PARENTC                              {:RESULT=a;:}
 |  ENTERO:a                                                 {:RESULT=new Operacion(new Double(a));:}
 |  DECIMAL:a                                                {:RESULT=new Operacion(new Double(a));:}
 |  CARACTER:a                                               {:RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);:}
 |  IDENTIFICADOR: a                                         {:RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);:}


;

expresion_cadena::=
    expresion_cadena:a CONCAT expresion_cadena:b    {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.CONCATENACION);:}
 |  CADENA:a                                        {:RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);:}
 |  expresion:a                                     {:RESULT=a;:}
;

expresion_logica  ::=
   expresion:a  MAYOR   expresion:b         {:RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MAYOR_QUE);:}
 | expresion:a  MENOR   expresion:b         {:RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MENOR_QUE);:}
;