package analyst;
import controladores.*;
import java.util.LinkedList;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
parser code
{:
    public LinkedList<Instruccion> AST;
    public void syntax_error(Symbol s){
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba: " +s.value+".");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }
:}

terminal String PUNTOCOMA,DOSPUNTOS,PARENTA,PARENTC;
terminal String MAS,MENOS,POR,DIV,CONCAT;
terminal String INCREMENTO,DECREMENTO;
terminal String MENOR,MAYOR;
terminal String ENTERO;
terminal String DECIMAL;
terminal String CARACTER;
terminal String CADENA;
terminal String UMENOS;
terminal String RESCRIBIR, RMIENTRAS,RENTERO,RSI,RSINO,RCADENA,RHACER,RFINSI, RFINMIENTRAS;
terminal String RHASTA, RPARA, RCONPASO, RFINPARA,RSEGUN,RFINSEGUN, RDEOTROMODO;
terminal String IGUAL;
terminal String IDENTIFICADOR;

non terminal ini;
non terminal LinkedList<Instruccion> instrucciones;
non terminal Instruccion instruccion;
non terminal Operacion expresion;
non terminal LinkedList<Instruccion> else_ifs;
non terminal Operacion expresion_cadena;
non terminal Operacion expresion_logica;
non terminal caso, cases;
precedence left CONCAT;
precedence left MAS,MENOS;
precedence left POR,DIV;
precedence right UMENOS;
precedence nonassoc INCREMENTO,DECREMENTO;

start with ini;

ini::=instrucciones:a{:
    parser.AST=a;
:}
;

instrucciones ::=
   instrucciones:a instruccion:b{:RESULT=a; RESULT.add(b);:}
 | instruccion:a{:RESULT=new LinkedList<>(); RESULT.add(a);:}
;

instruccion ::=
   RESCRIBIR   PARENTA expresion_cadena:a PARENTC PUNTOCOMA                          {:RESULT=new Escribir(a);:}
 | RMIENTRAS    PARENTA expresion_logica:a PARENTC RHACER instrucciones:b RFINMIENTRAS {:RESULT=new Mientras(a,b);:}
 | RENTERO      IDENTIFICADOR:a PUNTOCOMA                                           {:RESULT=new Declaracion(a,Tipo.NUMERO);:}
 | RCADENA    IDENTIFICADOR:a PUNTOCOMA                                           {:RESULT=new Declaracion(a,Tipo.CARACTER);:}
 | IDENTIFICADOR:a IGUAL expresion:b PUNTOCOMA                             {:RESULT=new Asignacion(a,b);:}
 | RSI PARENTA expresion_logica:a PARENTC RHACER instrucciones:b RFINSI          {:RESULT=new Si(a,b);:}
 | RSI PARENTA expresion_logica:a PARENTC RHACER instrucciones:b RFINSI  RSINO RHACER instrucciones:c RFINSI {:RESULT=new Si(a,b,c);:}
 | RSI PARENTA expresion_logica:a PARENTC RHACER instrucciones:b RFINSI else_ifs:l {:RESULT=new Si(a,b,l,null);:}
 | RSI PARENTA expresion_logica:a PARENTC RHACER instrucciones:b RFINSI else_ifs:l RSINO RHACER instrucciones:c RFINSI {:RESULT=new Si(a,b,l,c);:}
 | RPARA expresion:a RHASTA expresion:b RCONPASO expresion:c RHACER instrucciones:d RFINPARA {:RESULT=new Para(a,b,c,d);:}
 | RSEGUN expresion:a  RHACER cases:l RFINSEGUN {: //RESULT=new Segun(a,l);:}
 | IDENTIFICADOR:a INCREMENTO PUNTOCOMA                                          {:RESULT=new Incremento(a);:}
 | IDENTIFICADOR:a DECREMENTO PUNTOCOMA                                          {:RESULT=new Decremento(a);:}
 | error
;

else_ifs ::= else_ifs:l RSINO RSI PARENTA expresion_logica:a PARENTC RHACER instrucciones:b RFINSI {:RESULT= l; RESULT.add(new Si(a,b));:}
                      | RSINO RSI PARENTA expresion_logica:a PARENTC RHACER instrucciones:b RFINSI {:RESULT= new LinkedList<>(); RESULT.add(new Si(a,b));:}
;
cases ::=
    caso
 | cases caso
 ;

caso ::=
    PARENTA expresion:a PARENTC DOSPUNTOS instrucciones:b        {::}
 | RDEOTROMODO DOSPUNTOS instrucciones:a                   {::}
 ;

expresion ::=
    MENOS expresion:a                               {:RESULT=new Operacion(a,Operacion.Tipo_operacion.NEGATIVO);:}%prec UMENOS
 |  expresion:a MAS        expresion:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.SUMA);:}
 |  expresion:a MENOS      expresion:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.RESTA);:}
 |  expresion:a POR        expresion:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.MULTIPLICACION);:}
 |  expresion:a DIV   expresion:b     {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.DIVISION);:}
 |  PARENTA expresion:a PARENTC                       {:RESULT=a;:}
 |  ENTERO:a                                                 {:RESULT=new Operacion(new Double(a));:}
 |  DECIMAL:a                                                {:RESULT=new Operacion(new Double(a));:}
 |  CARACTER:a                                               {:RESULT=new Operacion(a,Operacion.Tipo_operacion.CARACTER);:}
 |  IDENTIFICADOR: a                                         {:RESULT=new Operacion(a,Operacion.Tipo_operacion.IDENTIFICADOR);:}

;

expresion_cadena::=
    expresion_cadena:a CONCAT expresion_cadena:b {:RESULT=new Operacion(a,b,Operacion.Tipo_operacion.CONCATENACION);:}
 |  CADENA:a                                     {:RESULT=new Operacion(a,Operacion.Tipo_operacion.CADENA);:}
 |  expresion:a                         {:RESULT=a;:}
;

expresion_logica  ::=
   expresion:a  MAYOR   expresion:b{:RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MAYOR_QUE);:}
 | expresion:a  MENOR   expresion:b{:RESULT=new Operacion(a,b, Operacion.Tipo_operacion.MENOR_QUE);:}
;